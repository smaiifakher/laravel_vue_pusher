<?php

namespace App\Exceptions;

use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Throwable;
use Tymon\JWTAuth\Exceptions\JWTException;
use Symfony\Component\HttpFoundation\Response as ResponseAlias;
use Tymon\JWTAuth\Exceptions\TokenBlacklistedException;
use Tymon\JWTAuth\Exceptions\TokenExpiredException;
use Tymon\JWTAuth\Exceptions\TokenInvalidException;


class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    public function render($request, Throwable $e)
    {
        if ($e instanceof TokenBlacklistedException) {
            return response(['error' => 'Token can not be used, Get new one'], ResponseAlias::HTTP_BAD_REQUEST);
        }
        if ($e instanceof TokenInvalidException) {
            return response(['error' => 'Token is invalid'], ResponseAlias::HTTP_BAD_REQUEST);
        }
        if ($e instanceof TokenExpiredException) {
            return response(['error' => 'Token is expired'], ResponseAlias::HTTP_BAD_REQUEST);
        }
        if ($e instanceof JWTException) {
            return response(['error' => 'Token is not Provided'], ResponseAlias::HTTP_BAD_REQUEST);
        }

        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }

    public function report(Throwable $e)
    {
        return parent::report($e); // TODO: Change the autogenerated stub
    }
}
